(()=>{"use strict";var e={28:(e,r,t)=>{t.d(r,{Z:()=>s});var n=t(537),a=t.n(n),o=t(645),i=t.n(o)()(a());i.push([e.id,".board {\r\n  border: 1px solid black;\r\n  display: grid;\r\n  grid-template-rows: repeat(10, 1fr);\r\n  width: 300px;\r\n  height: 300px;\r\n}\r\n\r\n.row-p1,\r\n.row-p2 {\r\n  display: grid;\r\n  grid-template-columns: repeat(10, 1fr);\r\n  border: 1px solid black;\r\n}\r\n\r\n.cell-p1,\r\n.cell-p2 {\r\n  border: 1px solid black;\r\n}\r\n\r\n.hit {\r\n  background-color: black;\r\n}\r\n\r\n#modalContainer {\r\n  width: 100%;\r\n  height: 100%;\r\n  position: fixed;\r\n  z-index: 1;\r\n  left: 0;\r\n  top: 0;\r\n  display: none;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n  text-align: center;\r\n}\r\n\r\n.modal {\r\n  display: inline-flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  gap: 20px;\r\n  padding: 30px;\r\n  background-color: #e8e8e8;\r\n  margin: 15%;\r\n  border-radius: 1em;\r\n}\r\n","",{version:3,sources:["webpack://./src/styles.css"],names:[],mappings:"AAAA;EACE,uBAAuB;EACvB,aAAa;EACb,mCAAmC;EACnC,YAAY;EACZ,aAAa;AACf;;AAEA;;EAEE,aAAa;EACb,sCAAsC;EACtC,uBAAuB;AACzB;;AAEA;;EAEE,uBAAuB;AACzB;;AAEA;EACE,uBAAuB;AACzB;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,eAAe;EACf,UAAU;EACV,OAAO;EACP,MAAM;EACN,aAAa;EACb,oCAAoC;EACpC,kBAAkB;AACpB;;AAEA;EACE,oBAAoB;EACpB,sBAAsB;EACtB,mBAAmB;EACnB,SAAS;EACT,aAAa;EACb,yBAAyB;EACzB,WAAW;EACX,kBAAkB;AACpB",sourcesContent:[".board {\r\n  border: 1px solid black;\r\n  display: grid;\r\n  grid-template-rows: repeat(10, 1fr);\r\n  width: 300px;\r\n  height: 300px;\r\n}\r\n\r\n.row-p1,\r\n.row-p2 {\r\n  display: grid;\r\n  grid-template-columns: repeat(10, 1fr);\r\n  border: 1px solid black;\r\n}\r\n\r\n.cell-p1,\r\n.cell-p2 {\r\n  border: 1px solid black;\r\n}\r\n\r\n.hit {\r\n  background-color: black;\r\n}\r\n\r\n#modalContainer {\r\n  width: 100%;\r\n  height: 100%;\r\n  position: fixed;\r\n  z-index: 1;\r\n  left: 0;\r\n  top: 0;\r\n  display: none;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n  text-align: center;\r\n}\r\n\r\n.modal {\r\n  display: inline-flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  gap: 20px;\r\n  padding: 30px;\r\n  background-color: #e8e8e8;\r\n  margin: 15%;\r\n  border-radius: 1em;\r\n}\r\n"],sourceRoot:""}]);const s=i},645:e=>{e.exports=function(e){var r=[];return r.toString=function(){return this.map((function(r){var t="",n=void 0!==r[5];return r[4]&&(t+="@supports (".concat(r[4],") {")),r[2]&&(t+="@media ".concat(r[2]," {")),n&&(t+="@layer".concat(r[5].length>0?" ".concat(r[5]):""," {")),t+=e(r),n&&(t+="}"),r[2]&&(t+="}"),r[4]&&(t+="}"),t})).join("")},r.i=function(e,t,n,a,o){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(n)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(i[l]=!0)}for(var c=0;c<e.length;c++){var d=[].concat(e[c]);n&&i[d[0]]||(void 0!==o&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=o),t&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=t):d[2]=t),a&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=a):d[4]="".concat(a)),r.push(d))}},r}},537:e=>{e.exports=function(e){var r=e[1],t=e[3];if(!t)return r;if("function"==typeof btoa){var n=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(n),o="/*# ".concat(a," */"),i=t.sources.map((function(e){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(e," */")}));return[r].concat(i).concat([o]).join("\n")}return[r].join("\n")}},379:e=>{var r=[];function t(e){for(var t=-1,n=0;n<r.length;n++)if(r[n].identifier===e){t=n;break}return t}function n(e,n){for(var o={},i=[],s=0;s<e.length;s++){var l=e[s],c=n.base?l[0]+n.base:l[0],d=o[c]||0,p="".concat(c," ").concat(d);o[c]=d+1;var u=t(p),A={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==u)r[u].references++,r[u].updater(A);else{var f=a(A,n);n.byIndex=s,r.splice(s,0,{identifier:p,updater:f,references:1})}i.push(p)}return i}function a(e,r){var t=r.domAPI(r);t.update(e);return function(r){if(r){if(r.css===e.css&&r.media===e.media&&r.sourceMap===e.sourceMap&&r.supports===e.supports&&r.layer===e.layer)return;t.update(e=r)}else t.remove()}}e.exports=function(e,a){var o=n(e=e||[],a=a||{});return function(e){e=e||[];for(var i=0;i<o.length;i++){var s=t(o[i]);r[s].references--}for(var l=n(e,a),c=0;c<o.length;c++){var d=t(o[c]);0===r[d].references&&(r[d].updater(),r.splice(d,1))}o=l}}},569:e=>{var r={};e.exports=function(e,t){var n=function(e){if(void 0===r[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}r[e]=t}return r[e]}(e);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(t)}},216:e=>{e.exports=function(e){var r=document.createElement("style");return e.setAttributes(r,e.attributes),e.insert(r,e.options),r}},565:(e,r,t)=>{e.exports=function(e){var r=t.nc;r&&e.setAttribute("nonce",r)}},795:e=>{e.exports=function(e){var r=e.insertStyleElement(e);return{update:function(t){!function(e,r,t){var n="";t.supports&&(n+="@supports (".concat(t.supports,") {")),t.media&&(n+="@media ".concat(t.media," {"));var a=void 0!==t.layer;a&&(n+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),n+=t.css,a&&(n+="}"),t.media&&(n+="}"),t.supports&&(n+="}");var o=t.sourceMap;o&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),r.styleTagTransform(n,e,r.options)}(r,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(r)}}}},589:e=>{e.exports=function(e,r){if(r.styleSheet)r.styleSheet.cssText=e;else{for(;r.firstChild;)r.removeChild(r.firstChild);r.appendChild(document.createTextNode(e))}}}},r={};function t(n){var a=r[n];if(void 0!==a)return a.exports;var o=r[n]={id:n,exports:{}};return e[n](o,o.exports,t),o.exports}t.n=e=>{var r=e&&e.__esModule?()=>e.default:()=>e;return t.d(r,{a:r}),r},t.d=(e,r)=>{for(var n in r)t.o(r,n)&&!t.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:r[n]})},t.o=(e,r)=>Object.prototype.hasOwnProperty.call(e,r),t.nc=void 0,(()=>{var e=t(379),r=t.n(e),n=t(795),a=t.n(n),o=t(569),i=t.n(o),s=t(565),l=t.n(s),c=t(216),d=t.n(c),p=t(589),u=t.n(p),A=t(28),f={};f.styleTagTransform=u(),f.setAttributes=l(),f.insert=i().bind(null,"head"),f.domAPI=a(),f.insertStyleElement=d();r()(A.Z,f);A.Z&&A.Z.locals&&A.Z.locals;const h=()=>{let e=[],r=[],t=[],n=[];(()=>{for(let r=0;r<10;r++){e[r]=[];for(let t=0;t<10;t++)e[r].push(!1)}})();const a=(r,t)=>{const n=(n,a)=>{r+n>9||r+n<0||!1===e[r+n][t+a]&&(e[r+n][t+a]="reserved")},a=e=>{n(e,-1),n(e,0),n(e,1)};a(-1),a(0),a(1)};return{board:e,placeShip:(r,n,o,i)=>{if(e[r][n])return;let s=0;if("h"===i){if(o.length+n>10)return!1;for(let t=0;t<o.length;t++)if("reserved"===e[r][n+t])return!1;t.push([r,n]);for(let t=n;t<n+o.length;t++)e[r][t]={ship:o,pos:s},a(r,n+s),s++;return!0}if("v"===i){if(o.length+r>10)return!1;for(let t=0;t<o.length;t++)if("reserved"===e[r+t][n])return!1;t.push([r,n]);for(let t=r;t<r+o.length;t++)e[t][n]={ship:o,pos:s},a(r+s,n),s++;return!0}},missedShots:r,receiveAttack:(t,a)=>"reserved"===e[t][a]?"nothing":e[t][a]&&"missed"!==e[t][a]?(e[t][a].ship.hit(e[t][a].pos),n.push([t,a]),"hit"):(r.push([t,a]),e[t][a]="missed","miss"),placedShips:t,allShipsSunk:()=>{let r=!0;return t.forEach((t=>{e[t[0]][t[1]].ship.isSunk()||(r=!1)})),r},hitShots:n}},v=e=>{const r={name:e,board:h(),turn:!1,setTurn:e=>{r.turn=!0,e.turn=!1}};return r},m=e=>{let r=e,t=[];return{length:r,hits:t,hit:e=>{e>r||t.includes(e)||t.push(e)},isSunk:()=>t.length===r}},b=(m(5),m(4),m(3),m(3),m(2),v("p1")),g=v("p2");((e,r)=>{for(let r=0;r<10;r++){let t=document.createElement("div");t.classList.add("row-p1"),t.setAttribute("id",`p1-row${r}`),document.getElementById("board1").appendChild(t),e.board.board[r].forEach(((n,a)=>{let o=document.createElement("div");o.classList.add("cell-p1"),o.setAttribute("id",`p1-row${r}-cell${a}`),t.appendChild(o),o.addEventListener("click",(()=>{e.board.receiveAttack(r,a)}))}))}for(let e=0;e<10;e++){let t=document.createElement("div");t.classList.add("row-p2"),t.setAttribute("id",`p2-row${e}`),document.getElementById("board2").appendChild(t),r.board.board[e].forEach(((n,a)=>{let o=document.createElement("div");o.classList.add("cell-p2"),o.setAttribute("id",`p2-row${e}-cell${a}`),t.appendChild(o),o.addEventListener("click",(t=>{let n=r.board.receiveAttack(e,a);"hit"===n&&t.target.classList.add("hit"),"miss"===n&&t.target.classList.add("miss")}))}))}})(b,g);const E=document.querySelector("#modalContainer"),C=document.querySelector(".modalButton"),y=document.querySelector("#xSelector"),x=document.querySelector("#ySelector"),k=document.querySelector("#addButton"),B=document.querySelector("#orientation"),S=document.querySelector("#shipSelector");C.addEventListener("click",(()=>{E.style.display="block"})),window.addEventListener("click",(e=>{e.target==E&&(E.style.display="none")})),k.addEventListener("click",(()=>{if(0!==y.value.length&&0!==x.value.length&&!isNaN(y.value)&&!isNaN(x.value))switch(S.value){case"carrier":if(b.board.placeShip(parseInt(y.value),parseInt(x.value),m(5),B.value))for(let e=0;e<S.length;e++)"carrier"==S.options[e].value&&S.remove(e);break;case"battleship":if(b.board.placeShip(parseInt(y.value),parseInt(x.value),m(4),B.value))for(let e=0;e<S.length;e++)"battleship"==S.options[e].value&&S.remove(e);break;case"destroyer":if(b.board.placeShip(parseInt(y.value),parseInt(x.value),m(3),B.value))for(let e=0;e<S.length;e++)"destroyer"==S.options[e].value&&S.remove(e);break;case"submarine":if(b.board.placeShip(parseInt(y.value),parseInt(x.value),m(3),B.value))for(let e=0;e<S.length;e++)"submarine"==S.options[e].value&&S.remove(e);break;case"patrol":if(b.board.placeShip(parseInt(y.value),parseInt(x.value),m(2),B.value))for(let e=0;e<S.length;e++)"patrol"==S.options[e].value&&S.remove(e)}}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,