(()=>{"use strict";var e={28:(e,r,t)=>{t.d(r,{Z:()=>i});var n=t(537),o=t.n(n),a=t(645),s=t.n(a)()(o());s.push([e.id,".board {\r\n  border: 1px solid black;\r\n  display: grid;\r\n  grid-template-rows: repeat(10, 1fr);\r\n  width: 300px;\r\n  height: 300px;\r\n}\r\n\r\n.row-p1,\r\n.row-p2 {\r\n  display: grid;\r\n  grid-template-columns: repeat(10, 1fr);\r\n  border: 1px solid black;\r\n}\r\n\r\n.cell-p1,\r\n.cell-p2 {\r\n  border: 1px solid black;\r\n}\r\n\r\n.hit {\r\n  background-color: black;\r\n}\r\n","",{version:3,sources:["webpack://./src/styles.css"],names:[],mappings:"AAAA;EACE,uBAAuB;EACvB,aAAa;EACb,mCAAmC;EACnC,YAAY;EACZ,aAAa;AACf;;AAEA;;EAEE,aAAa;EACb,sCAAsC;EACtC,uBAAuB;AACzB;;AAEA;;EAEE,uBAAuB;AACzB;;AAEA;EACE,uBAAuB;AACzB",sourcesContent:[".board {\r\n  border: 1px solid black;\r\n  display: grid;\r\n  grid-template-rows: repeat(10, 1fr);\r\n  width: 300px;\r\n  height: 300px;\r\n}\r\n\r\n.row-p1,\r\n.row-p2 {\r\n  display: grid;\r\n  grid-template-columns: repeat(10, 1fr);\r\n  border: 1px solid black;\r\n}\r\n\r\n.cell-p1,\r\n.cell-p2 {\r\n  border: 1px solid black;\r\n}\r\n\r\n.hit {\r\n  background-color: black;\r\n}\r\n"],sourceRoot:""}]);const i=s},645:e=>{e.exports=function(e){var r=[];return r.toString=function(){return this.map((function(r){var t="",n=void 0!==r[5];return r[4]&&(t+="@supports (".concat(r[4],") {")),r[2]&&(t+="@media ".concat(r[2]," {")),n&&(t+="@layer".concat(r[5].length>0?" ".concat(r[5]):""," {")),t+=e(r),n&&(t+="}"),r[2]&&(t+="}"),r[4]&&(t+="}"),t})).join("")},r.i=function(e,t,n,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var s={};if(n)for(var i=0;i<this.length;i++){var c=this[i][0];null!=c&&(s[c]=!0)}for(var l=0;l<e.length;l++){var d=[].concat(e[l]);n&&s[d[0]]||(void 0!==a&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=a),t&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=t):d[2]=t),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),r.push(d))}},r}},537:e=>{e.exports=function(e){var r=e[1],t=e[3];if(!t)return r;if("function"==typeof btoa){var n=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(n),a="/*# ".concat(o," */"),s=t.sources.map((function(e){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(e," */")}));return[r].concat(s).concat([a]).join("\n")}return[r].join("\n")}},379:e=>{var r=[];function t(e){for(var t=-1,n=0;n<r.length;n++)if(r[n].identifier===e){t=n;break}return t}function n(e,n){for(var a={},s=[],i=0;i<e.length;i++){var c=e[i],l=n.base?c[0]+n.base:c[0],d=a[l]||0,p="".concat(l," ").concat(d);a[l]=d+1;var u=t(p),f={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==u)r[u].references++,r[u].updater(f);else{var h=o(f,n);n.byIndex=i,r.splice(i,0,{identifier:p,updater:h,references:1})}s.push(p)}return s}function o(e,r){var t=r.domAPI(r);t.update(e);return function(r){if(r){if(r.css===e.css&&r.media===e.media&&r.sourceMap===e.sourceMap&&r.supports===e.supports&&r.layer===e.layer)return;t.update(e=r)}else t.remove()}}e.exports=function(e,o){var a=n(e=e||[],o=o||{});return function(e){e=e||[];for(var s=0;s<a.length;s++){var i=t(a[s]);r[i].references--}for(var c=n(e,o),l=0;l<a.length;l++){var d=t(a[l]);0===r[d].references&&(r[d].updater(),r.splice(d,1))}a=c}}},569:e=>{var r={};e.exports=function(e,t){var n=function(e){if(void 0===r[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}r[e]=t}return r[e]}(e);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(t)}},216:e=>{e.exports=function(e){var r=document.createElement("style");return e.setAttributes(r,e.attributes),e.insert(r,e.options),r}},565:(e,r,t)=>{e.exports=function(e){var r=t.nc;r&&e.setAttribute("nonce",r)}},795:e=>{e.exports=function(e){var r=e.insertStyleElement(e);return{update:function(t){!function(e,r,t){var n="";t.supports&&(n+="@supports (".concat(t.supports,") {")),t.media&&(n+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(n+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),n+=t.css,o&&(n+="}"),t.media&&(n+="}"),t.supports&&(n+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),r.styleTagTransform(n,e,r.options)}(r,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(r)}}}},589:e=>{e.exports=function(e,r){if(r.styleSheet)r.styleSheet.cssText=e;else{for(;r.firstChild;)r.removeChild(r.firstChild);r.appendChild(document.createTextNode(e))}}}},r={};function t(n){var o=r[n];if(void 0!==o)return o.exports;var a=r[n]={id:n,exports:{}};return e[n](a,a.exports,t),a.exports}t.n=e=>{var r=e&&e.__esModule?()=>e.default:()=>e;return t.d(r,{a:r}),r},t.d=(e,r)=>{for(var n in r)t.o(r,n)&&!t.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:r[n]})},t.o=(e,r)=>Object.prototype.hasOwnProperty.call(e,r),t.nc=void 0,(()=>{var e=t(379),r=t.n(e),n=t(795),o=t.n(n),a=t(569),s=t.n(a),i=t(565),c=t.n(i),l=t(216),d=t.n(l),p=t(589),u=t.n(p),f=t(28),h={};h.styleTagTransform=u(),h.setAttributes=c(),h.insert=s().bind(null,"head"),h.domAPI=o(),h.insertStyleElement=d();r()(f.Z,h);f.Z&&f.Z.locals&&f.Z.locals;const v=()=>{let e=[],r=[],t=[],n=[];(()=>{for(let r=0;r<10;r++){e[r]=[];for(let t=0;t<10;t++)e[r].push(!1)}})();const o=(r,t)=>{const n=(n,o)=>{r+n>9||r+n<0||!1===e[r+n][t+o]&&(e[r+n][t+o]="reserved")},o=e=>{n(e,-1),n(e,0),n(e,1)};o(-1),o(0),o(1)};return{board:e,placeShip:(r,n,a,s)=>{if(e[r][n])return;let i=0;if("h"===s){if(a.length+n>10)return;for(let t=0;t<a.length;t++)if("reserved"===e[r][n+t])return;t.push([r,n]);for(let t=n;t<n+a.length;t++)e[r][t]={ship:a,pos:i},o(r,n+i),i++}if("v"===s){if(a.length+r>10)return;for(let t=0;t<a.length;t++)if("reserved"===e[r+t][n])return;t.push([r,n]);for(let t=r;t<r+a.length;t++)e[t][n]={ship:a,pos:i},o(r+i,n),i++}},missedShots:r,receiveAttack:(t,o)=>"reserved"===e[t][o]?"nothing":e[t][o]&&"missed"!==e[t][o]?(e[t][o].ship.hit(e[t][o].pos),n.push([t,o]),"hit"):(r.push([t,o]),e[t][o]="missed","miss"),placedShips:t,allShipsSunk:()=>{let r=!0;return t.forEach((t=>{e[t[0]][t[1]].ship.isSunk()||(r=!1)})),r},hitShots:n}},m=e=>{const r={name:e,board:v(),turn:!1,setTurn:e=>{r.turn=!0,e.turn=!1}};return r},A=e=>{let r=e,t=[];return{length:r,hits:t,hit:e=>{e>r||t.includes(e)||t.push(e)},isSunk:()=>t.length===r}},b=[null,A(5),A(4),A(3),A(3),A(2)],g=m("p1"),y=m("p2");((e,r)=>{for(let r=0;r<10;r++){let t=document.createElement("div");t.classList.add("row-p1"),t.setAttribute("id",`p1-row${r}`),document.getElementById("board1").appendChild(t),e.board.board[r].forEach(((n,o)=>{let a=document.createElement("div");a.classList.add("cell-p1"),a.setAttribute("id",`p1-row${r}-cell${o}`),t.appendChild(a),a.addEventListener("click",(()=>{e.board.receiveAttack(r,o)}))}))}for(let e=0;e<10;e++){let t=document.createElement("div");t.classList.add("row-p2"),t.setAttribute("id",`p2-row${e}`),document.getElementById("board2").appendChild(t),r.board.board[e].forEach(((n,o)=>{let a=document.createElement("div");a.classList.add("cell-p2"),a.setAttribute("id",`p2-row${e}-cell${o}`),t.appendChild(a),a.addEventListener("click",(t=>{let n=r.board.receiveAttack(e,o);"hit"===n&&t.target.classList.add("hit"),"miss"===n&&t.target.classList.add("miss")}))}))}})(g,y),(e=>{const r=["v","h"];for(let t=0;t<6;t++)for(;e.placedShips.length!==t;)e.placeShip(Math.floor(10*Math.random()),Math.floor(10*Math.random()),b[t],r[Math.floor(Math.random()*r.length)])})(y.board),console.log(y.board)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,