(()=>{"use strict";var e={28:(e,r,n)=>{n.d(r,{Z:()=>c});var t=n(537),o=n.n(t),a=n(645),i=n.n(a)()(o());i.push([e.id,".board {\r\n  border: 1px solid black;\r\n  display: grid;\r\n  grid-template-rows: repeat(10, 1fr);\r\n  width: 300px;\r\n  height: 300px;\r\n}\r\n\r\n.row-p1,\r\n.row-p2 {\r\n  display: grid;\r\n  grid-template-columns: repeat(10, 1fr);\r\n  border: 1px solid black;\r\n}\r\n\r\n.cell-p1,\r\n.cell-p2 {\r\n  border: 1px solid black;\r\n}\r\n\r\n.hit {\r\n  background-color: black;\r\n}\r\n\r\n#modalContainer {\r\n  width: 100%;\r\n  height: 100%;\r\n  position: fixed;\r\n  z-index: 1;\r\n  left: 0;\r\n  top: 0;\r\n  display: none;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n  text-align: center;\r\n}\r\n\r\n.modal {\r\n  display: inline-flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  gap: 20px;\r\n  padding: 30px;\r\n  background-color: #e8e8e8;\r\n  margin: 15%;\r\n  border-radius: 1em;\r\n}\r\n","",{version:3,sources:["webpack://./src/styles.css"],names:[],mappings:"AAAA;EACE,uBAAuB;EACvB,aAAa;EACb,mCAAmC;EACnC,YAAY;EACZ,aAAa;AACf;;AAEA;;EAEE,aAAa;EACb,sCAAsC;EACtC,uBAAuB;AACzB;;AAEA;;EAEE,uBAAuB;AACzB;;AAEA;EACE,uBAAuB;AACzB;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,eAAe;EACf,UAAU;EACV,OAAO;EACP,MAAM;EACN,aAAa;EACb,oCAAoC;EACpC,kBAAkB;AACpB;;AAEA;EACE,oBAAoB;EACpB,sBAAsB;EACtB,mBAAmB;EACnB,SAAS;EACT,aAAa;EACb,yBAAyB;EACzB,WAAW;EACX,kBAAkB;AACpB",sourcesContent:[".board {\r\n  border: 1px solid black;\r\n  display: grid;\r\n  grid-template-rows: repeat(10, 1fr);\r\n  width: 300px;\r\n  height: 300px;\r\n}\r\n\r\n.row-p1,\r\n.row-p2 {\r\n  display: grid;\r\n  grid-template-columns: repeat(10, 1fr);\r\n  border: 1px solid black;\r\n}\r\n\r\n.cell-p1,\r\n.cell-p2 {\r\n  border: 1px solid black;\r\n}\r\n\r\n.hit {\r\n  background-color: black;\r\n}\r\n\r\n#modalContainer {\r\n  width: 100%;\r\n  height: 100%;\r\n  position: fixed;\r\n  z-index: 1;\r\n  left: 0;\r\n  top: 0;\r\n  display: none;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n  text-align: center;\r\n}\r\n\r\n.modal {\r\n  display: inline-flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  gap: 20px;\r\n  padding: 30px;\r\n  background-color: #e8e8e8;\r\n  margin: 15%;\r\n  border-radius: 1em;\r\n}\r\n"],sourceRoot:""}]);const c=i},645:e=>{e.exports=function(e){var r=[];return r.toString=function(){return this.map((function(r){var n="",t=void 0!==r[5];return r[4]&&(n+="@supports (".concat(r[4],") {")),r[2]&&(n+="@media ".concat(r[2]," {")),t&&(n+="@layer".concat(r[5].length>0?" ".concat(r[5]):""," {")),n+=e(r),t&&(n+="}"),r[2]&&(n+="}"),r[4]&&(n+="}"),n})).join("")},r.i=function(e,n,t,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(t)for(var c=0;c<this.length;c++){var s=this[c][0];null!=s&&(i[s]=!0)}for(var l=0;l<e.length;l++){var d=[].concat(e[l]);t&&i[d[0]]||(void 0!==a&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=a),n&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=n):d[2]=n),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),r.push(d))}},r}},537:e=>{e.exports=function(e){var r=e[1],n=e[3];if(!n)return r;if("function"==typeof btoa){var t=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(t),a="/*# ".concat(o," */"),i=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[r].concat(i).concat([a]).join("\n")}return[r].join("\n")}},379:e=>{var r=[];function n(e){for(var n=-1,t=0;t<r.length;t++)if(r[t].identifier===e){n=t;break}return n}function t(e,t){for(var a={},i=[],c=0;c<e.length;c++){var s=e[c],l=t.base?s[0]+t.base:s[0],d=a[l]||0,p="".concat(l," ").concat(d);a[l]=d+1;var u=n(p),A={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==u)r[u].references++,r[u].updater(A);else{var f=o(A,t);t.byIndex=c,r.splice(c,0,{identifier:p,updater:f,references:1})}i.push(p)}return i}function o(e,r){var n=r.domAPI(r);n.update(e);return function(r){if(r){if(r.css===e.css&&r.media===e.media&&r.sourceMap===e.sourceMap&&r.supports===e.supports&&r.layer===e.layer)return;n.update(e=r)}else n.remove()}}e.exports=function(e,o){var a=t(e=e||[],o=o||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var c=n(a[i]);r[c].references--}for(var s=t(e,o),l=0;l<a.length;l++){var d=n(a[l]);0===r[d].references&&(r[d].updater(),r.splice(d,1))}a=s}}},569:e=>{var r={};e.exports=function(e,n){var t=function(e){if(void 0===r[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}r[e]=n}return r[e]}(e);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(n)}},216:e=>{e.exports=function(e){var r=document.createElement("style");return e.setAttributes(r,e.attributes),e.insert(r,e.options),r}},565:(e,r,n)=>{e.exports=function(e){var r=n.nc;r&&e.setAttribute("nonce",r)}},795:e=>{e.exports=function(e){var r=e.insertStyleElement(e);return{update:function(n){!function(e,r,n){var t="";n.supports&&(t+="@supports (".concat(n.supports,") {")),n.media&&(t+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(t+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),t+=n.css,o&&(t+="}"),n.media&&(t+="}"),n.supports&&(t+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),r.styleTagTransform(t,e,r.options)}(r,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(r)}}}},589:e=>{e.exports=function(e,r){if(r.styleSheet)r.styleSheet.cssText=e;else{for(;r.firstChild;)r.removeChild(r.firstChild);r.appendChild(document.createTextNode(e))}}}},r={};function n(t){var o=r[t];if(void 0!==o)return o.exports;var a=r[t]={id:t,exports:{}};return e[t](a,a.exports,n),a.exports}n.n=e=>{var r=e&&e.__esModule?()=>e.default:()=>e;return n.d(r,{a:r}),r},n.d=(e,r)=>{for(var t in r)n.o(r,t)&&!n.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:r[t]})},n.o=(e,r)=>Object.prototype.hasOwnProperty.call(e,r),n.nc=void 0,(()=>{var e=n(379),r=n.n(e),t=n(795),o=n.n(t),a=n(569),i=n.n(a),c=n(565),s=n.n(c),l=n(216),d=n.n(l),p=n(589),u=n.n(p),A=n(28),f={};f.styleTagTransform=u(),f.setAttributes=s(),f.insert=i().bind(null,"head"),f.domAPI=o(),f.insertStyleElement=d();r()(A.Z,f);A.Z&&A.Z.locals&&A.Z.locals;const h=()=>{let e=[],r=[],n=[],t=[];(()=>{for(let r=0;r<10;r++){e[r]=[];for(let n=0;n<10;n++)e[r].push(!1)}})();const o=(r,n)=>{const t=(t,o)=>{r+t>9||r+t<0||!1===e[r+t][n+o]&&(e[r+t][n+o]="reserved")},o=e=>{t(e,-1),t(e,0),t(e,1)};o(-1),o(0),o(1)};return{board:e,placeShip:(r,t,a,i)=>{if(e[r][t])return;let c=0;if("h"===i){if(a.length+t>10)return;for(let n=0;n<a.length;n++)if("reserved"===e[r][t+n])return;n.push([r,t]);for(let n=t;n<t+a.length;n++)e[r][n]={ship:a,pos:c},o(r,t+c),c++}if("v"===i){if(a.length+r>10)return;for(let n=0;n<a.length;n++)if("reserved"===e[r+n][t])return;n.push([r,t]);for(let n=r;n<r+a.length;n++)e[n][t]={ship:a,pos:c},o(r+c,t),c++}},missedShots:r,receiveAttack:(n,o)=>"reserved"===e[n][o]?"nothing":e[n][o]&&"missed"!==e[n][o]?(e[n][o].ship.hit(e[n][o].pos),t.push([n,o]),"hit"):(r.push([n,o]),e[n][o]="missed","miss"),placedShips:n,allShipsSunk:()=>{let r=!0;return n.forEach((n=>{e[n[0]][n[1]].ship.isSunk()||(r=!1)})),r},hitShots:t}},m=e=>{const r={name:e,board:h(),turn:!1,setTurn:e=>{r.turn=!0,e.turn=!1}};return r},v=e=>{let r=e,n=[];return{length:r,hits:n,hit:e=>{e>r||n.includes(e)||n.push(e)},isSunk:()=>n.length===r}},b=[null,v(5),v(4),v(3),v(3),v(2)],g=m("p1"),E=m("p2");((e,r)=>{for(let r=0;r<10;r++){let n=document.createElement("div");n.classList.add("row-p1"),n.setAttribute("id",`p1-row${r}`),document.getElementById("board1").appendChild(n),e.board.board[r].forEach(((t,o)=>{let a=document.createElement("div");a.classList.add("cell-p1"),a.setAttribute("id",`p1-row${r}-cell${o}`),n.appendChild(a),a.addEventListener("click",(()=>{e.board.receiveAttack(r,o)}))}))}for(let e=0;e<10;e++){let n=document.createElement("div");n.classList.add("row-p2"),n.setAttribute("id",`p2-row${e}`),document.getElementById("board2").appendChild(n),r.board.board[e].forEach(((t,o)=>{let a=document.createElement("div");a.classList.add("cell-p2"),a.setAttribute("id",`p2-row${e}-cell${o}`),n.appendChild(a),a.addEventListener("click",(n=>{let t=r.board.receiveAttack(e,o);"hit"===t&&n.target.classList.add("hit"),"miss"===t&&n.target.classList.add("miss")}))}))}})(g,E),(e=>{const r=["v","h"];for(let n=0;n<6;n++)for(;e.placedShips.length!==n;)e.placeShip(Math.floor(10*Math.random()),Math.floor(10*Math.random()),b[n],r[Math.floor(Math.random()*r.length)])})(E.board),console.log(E.board);const C=document.querySelector("#modalContainer"),y=document.querySelector(".modalButton"),x=(document.querySelector("#xSelector"),document.querySelector("#ySelector"),document.querySelector("#addButton"));document.querySelector("#orientation");y.addEventListener("click",(()=>{C.style.display="block"})),window.addEventListener("click",(e=>{e.target==C&&(C.style.display="none")})),x.addEventListener("click",(e=>{}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,